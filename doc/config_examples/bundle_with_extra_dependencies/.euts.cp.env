# Example TesStack configuration for testing Kaliop eZMigration Bundle on eZ Community Project (5.4)

# Use a specific project name - always a good idea when you plan to test the same bundle in different configurations
COMPOSE_PROJECT_NAME=kezmbt_cp
# We use Debian Jessie for the container OS as it comes with php 5.6 by default
TESTSTACK_DEBIAN_VERSION=jessie
# As of 2023/04, the default debian repos can not be used to update the docker image, as they are offline
TESTSTACK_UPDATE_OS_ON_BUILD=false
# We specify the php version too. This is redundant in this case and is only required for the teststack CI tests
TESTSTACK_PHP_VERSION=5.6

# Besides the eZ Kernel, our tests require NetgenTagsBundle and EzSystemsMatrixBundle
EZ_PACKAGES='ezsystems/ezpublish-community:~2014.11.1 ezsystems/ez-matrix-bundle:^0.1 netgen/tagsbundle:^2.0 ezsystems/behatbundle:^5.4.2'
EZ_BUNDLES='Kaliop\eZMigrationBundle\EzMigrationBundle EzSystems\MatrixBundle\EzSystemsMatrixBundle Netgen\TagsBundle\NetgenTagsBundle'

# Note that PHP 5.6 consumes more memory than later versions. When using Composer to calculate the set of dependencies
# to be installed, it might happen that PHP will run out of memory. Options that help in such cases are:
# 1. move to using Composer version 2.0 or later, which has greatly reduced memory usage
# 2. use `php -d memory_limit=-1` when running Composer, to make sure that PHP can use all the memory available
#    (note that recent Composer versions most likely are able to do this by themselves)
# 3. pre-calculate the set of dependencies on another computer with plenty of GB of RAM, store the produced composer.lock
#    file and replace the env var EZ_PACKAGES above with EZ_COMPOSER_LOCK, pointing to the file's location

# We use specifically version 5.7 here to exercise a code-path within the teststack via its CI setup
MYSQL_VERSION=5.7
